[general]
accounts = Gandi,Gmail,Ykone
maxsyncaccounts = 5
ui = TTYUI

[mbnames]
enabled = yes
filename = ~/.mutt/mailboxes
header = "mailboxes "
peritem = "+%(accountname)s/%(foldername)s"
sep = " "
footer = "\n"

# You can also specify a folderfilter.  It will apply to the
# *translated* folder name here, and it takes TWO arguments:
# accountname and foldername.  In all other ways, it will
# behave identically to the folderfilter for accounts.  Please see
# that section for more information and examples.
#
# Note that this filter can be used only to further restrict mbnames
# to a subset of folders that pass the account's folderfilter.
#
#
# You can customize the order in which mailbox names are listed in the
# generated file by specifying a sort_keyfunc, which takes a single
# dict argument containing keys 'accountname' and 'foldername'.  This
# function will be called once for each mailbox, and should return a
# suitable sort key that defines this mailbox' position in the custom
# ordering.
#
# This is useful with e.g. Mutt-sidebar, which uses the mailbox order
# from the generated file when listing mailboxes in the sidebar.
#
# Default setting is
# sort_keyfunc = lambda d: (d['accountname'], d['foldername'])


##################################################
# Accounts
##################################################

# This is an account definition clause.  You'll have one of these
# for each account listed in general/accounts above.

[Account Ykone]
localrepository = LocalYkone
remoterepository = RemoteYkone
autorefresh = 2

[Account Gmail]
localrepository = LocalGmail
remoterepository = RemoteGmail
autorefresh = 2

[Account Gandi]
localrepository = LocalGandi
remoterepository = RemoteGandi
autorefresh = 2


[Repository LocalYkone]
type = Maildir
localfolders = ~/mail/ykone

[Repository LocalGmail]
type = Maildir
localfolders = ~/mail/gmail

[Repository LocalGandi]
type = Maildir
localfolders = ~/mail/gandi


[Repository RemoteYkone]
type = Gmail
remoteuser = MY@EMA.IL
cert_fingerprint = bc9fb09aeb065316c9561d0d91c68ae822261601
folderfilter = lambda foldername: foldername not in ['[Gmail]/Important', '[Gmail]/Spam', '[Gmail]/Starred', '[Gmail]/All Mail']

[Repository RemoteGmail]
type = Gmail
remoteuser = MY@EMA.IL
cert_fingerprint = bc9fb09aeb065316c9561d0d91c68ae822261601
folderfilter = lambda foldername: foldername not in [
    '[Google Mail]/Bin',
    '[Google Mail]/Important',
    '[Google Mail]/Spam',
    '[Google Mail]/Starred',
    '[Google Mail]/All Mail']

[Repository RemoteGandi]
type = IMAP
remoteuser = MY@EMA.IL
remotehost = mail.gandi.net
ssl = yes
cert_fingerprint = 7486b39593b2e935619d9afd7677ad77633514da
folderfilter = lambda foldername: foldername not in [
    'INBOX.Trash',
    'Sent Messages',
    'ml']

# You can specify a folder translator.  This must be a eval-able
# Python expression that takes a foldername arg and returns the new
# value.  I suggest a lambda.  This example below will remove "INBOX." from
# the leading edge of folders (great for Courier IMAP users)
#
# See the user documentation for details and use cases. They are also
# online at:
# http://docs.offlineimap.org/en/latest/nametrans.html
#
# WARNING: you MUST construct this such that it NEVER returns
# the same value for two folders, UNLESS the second values are
# filtered out by folderfilter below.  Failure to follow this rule
# will result in undefined behavior
#
# nametrans = lambda foldername: re.sub('^INBOX\.', '', foldername)

# Using Courier remotely and want to duplicate its mailbox naming
# locally?  Try this:
#
# nametrans = lambda foldername: re.sub('^INBOX\.*', '.', foldername)

# You can specify which folders to sync using the folderfilter
# setting. You can provide any python function (e.g. a lambda function)
# which will be invoked for each foldername. If the filter function
# returns True, the folder will be synced, if it returns False, it. The
# folderfilter operates on the *UNTRANSLATED* name (before any nametrans
# translation takes place).
#
# Example 1: synchronizing only INBOX and Sent.
#
# folderfilter = lambda foldername: foldername in ['INBOX', 'Sent']
#
# Example 2: synchronizing everything except Trash.
#
# folderfilter = lambda foldername: foldername not in ['Trash']
#
# Example 3: Using a regular expression to exclude Trash and all folders
# containing the characters "Del".
#
# folderfilter = lambda foldername: not re.search('(^Trash$|Del)', foldername)
#
# If folderfilter is not specified, ALL remote folders will be
# synchronized.
#
# You can span multiple lines by indenting the others.  (Use backslashes
# at the end when required by Python syntax)  For instance:
#
# folderfilter = lambda foldername: foldername in
#        ['INBOX', 'Sent Mail', 'Deleted Items',
#         'Received']
#folderfilter = lambda foldername: foldername in [
#    'INBOX',
#    'importants',
#    'ml.deb-sec',
#    'ml.ob-cvs',
#    'ml.ob-cvs-p',
#    'ml.ob-ports',
#    'ml.ob-tech']


# You can specify folderincludes to include additional folders.  It
# should return a Python list.  This might be used to include a folder
# that was excluded by your folderfilter rule, to include a folder that
# your server does not specify with its LIST option, or to include a
# folder that is outside your basic reference. The 'reference' value
# will not be prefixed to this folder name, even if you have specified
# one.  For example:
# folderincludes = ['debian.user', 'debian.personal']


# You can specify 'foldersort' to determine how folders are sorted.
# This affects order of synchronization and mbnames. The expression
# should return -1, 0, or 1, as the default Python cmp() does.  The two
# arguments, x and y, are strings representing the names of the folders
# to be sorted.  The sorting is applied *AFTER* nametrans, if any.  The
# default is to sort IMAP folders alphabetically
# (case-insensitive). Usually, you should never have to modify this.  To
# eg. reverse the sort:
#
# foldersort = lambda x, y: -cmp(x, y)


